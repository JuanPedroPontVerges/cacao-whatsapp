import { Disclosure, Switch } from "@headlessui/react";
import { ChevronUpIcon } from "@heroicons/react/24/outline";
import type { GetServerSideProps, GetServerSidePropsContext, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import Button from "../components/Button";
import Form from "../components/Form";
import Modal from "../components/Modal";
import { getServerAuthSession } from "../server/common/get-server-auth-session";

const Catalog: NextPage = () => {
    const categoryForm = useForm();
    const { register } = categoryForm;
    const [enabled, setEnabled] = useState(false)
    const [isCreateCategoryModalOpen, setIsCreateCategoryModalOpen] = useState(false)
    const buttonClass = 'flex w-full justify-between rounded-lg bg-wapi-light-blue px-4 py-2 text-left text-sm font-medium  hover:bg-purple-200 focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75'
    const categories = [{
        id: 1,
        name: 'Combos',
    },
    {
        id: 2,
        name: 'Sushis',
    }]

    const toggleCreateCategoryModal = () => {
        setIsCreateCategoryModalOpen(!isCreateCategoryModalOpen);
    }

    const onSubmitCategoryForm: SubmitHandler<any> = async (input) => {
        console.log('input', input);
        return;
    }

    return (
        <>
            <Head>
                <title>Waip - Catálogo</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={'flex'}>
                <div className="h-96 rounded-lg border-4 border-dashed border-gray-200 basis-1/4">
                    <div className="w-full">
                        <div className="mx-auto w-full max-w-md rounded-2xl bg-white p-2">
                            <Disclosure>
                                {({ open }) => (
                                    <>
                                        <Disclosure.Button className={buttonClass}>
                                            <span>Categorías</span>
                                            <ChevronUpIcon
                                                className={`${open ? 'rotate-180 transform' : ''
                                                    } h-5 w-5 text-purple-500`}
                                            />
                                        </Disclosure.Button>
                                        {
                                            categories.map((category) => {
                                                return (
                                                    <Disclosure.Panel
                                                        key={category.id}
                                                        className="px-4 pt-4 pb-2 text-sm text-gray-500">
                                                        {category.name}
                                                    </Disclosure.Panel>
                                                )
                                            })
                                        }
                                    </>
                                )}
                            </Disclosure>
                            <Disclosure as="div" className="mt-2">
                                {({ open }) => (
                                    <>
                                        <Disclosure.Button className={buttonClass}>
                                            <span>Grupo de Opciónes</span>
                                            <ChevronUpIcon
                                                className={`${open ? 'rotate-180 transform' : ''
                                                    } h-5 w-5 text-purple-500`}
                                            />
                                        </Disclosure.Button>
                                        <Disclosure.Panel className="px-4 pt-4 pb-2 text-sm text-gray-500">
                                            No.
                                        </Disclosure.Panel>
                                    </>
                                )}
                            </Disclosure>
                        </div>
                    </div>
                </div>
                <div className="rounded-lg border-4 border-dashed border-gray-200 basis-3/4">
                    <div className="flex p-4 items-center">
                        <div className={'flex basis-2/4 justify-start gap-x-4 items-center'}>
                            <h4>Categoria seleccionada</h4>
                            <div>
                                <button
                                    onClick={toggleCreateCategoryModal}
                                    className="inline-flex justify-center rounded-md border border-transparent bg-blue-100 px-4 py-2 text-sm font-medium text-wapi-blue hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
                                >
                                    Crear categoría
                                </button>
                            </div>
                        </div>
                        <div className={'flex basis-2/4 justify-end gap-x-4 items-center'}>
                            <div>
                                <button>Editar</button>
                            </div>
                            <div>
                                <button>Borrar</button>
                            </div>
                            <Switch
                                checked={enabled}
                                onChange={setEnabled}
                                className={`${enabled ? 'bg-blue-600' : 'bg-gray-200'
                                    } relative inline-flex h-6 w-11 items-center rounded-full`}
                            >
                                <span
                                    className={`${enabled ? 'translate-x-6' : 'translate-x-1'
                                        } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                                />
                            </Switch>
                        </div>
                    </div>
                </div>
                <Modal title="Crear categoría" isOpen={isCreateCategoryModalOpen} onClose={toggleCreateCategoryModal}>
                    <Form form={categoryForm} onSubmitForm={onSubmitCategoryForm}>
                        <label htmlFor="street-address" className="block text-sm font-medium text-gray-700">
                            Nombre
                        </label>
                        <input
                            {...register('name')}
                            type="text"
                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                        <div className="flex justify-end mt-2">
                            <Button type={'submit'}>Crear categoría</Button>
                        </div>
                    </Form>
                </Modal>
            </div>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (ctx: GetServerSidePropsContext) => {
    const session = await getServerAuthSession(ctx);

    if (!session) {
        return {
            redirect: { destination: "/api/auth/signin", permanent: false },
        }
    }

    return {
        props: session
    }
}

export default Catalog;