import type { GetServerSideProps, GetServerSidePropsContext, NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import Form from "../components/Form";
import GoogleAutoComplete from "../components/GoogleAutoComplete";
import Modal from "../components/Modal";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from "../utils/trpc";


export interface ICreateVenueFormValues {
  name: string;
  address: string;
  googlePlaceId: string;
}
const Index: NextPage = () => {
  const form = useForm<ICreateVenueFormValues>();
  const { data } = useSession();
  const userQuery = trpc.useQuery(["userRouter.getVenues", { id: data?.user?.id }]);
  const venueMutation = trpc.useMutation(["venueRouter.create"]);

  const [isCreateVenueModalOpen, setIsCreateVenueModalOpen] = useState(false)

  const toggleVisibility = () => {
    setIsCreateVenueModalOpen(!isCreateVenueModalOpen);
  }

  const onSubmitForm: SubmitHandler<ICreateVenueFormValues> = async (input) => {
    if (data?.user?.id) {
      venueMutation.mutate({ ...input, userId: data?.user.id })
      toggleVisibility();
    }
    return;
  }

  useEffect(() => {
    if (userQuery.data) {
      const userHasVenue = userQuery.data.venue ? true : false;
      setIsCreateVenueModalOpen(!userHasVenue);
    }
  }, [userQuery.data])

  if (!userQuery.data) {
    return (
      <div>Loading... </div>
    )
  }

  return (
    <>
      <Head>
        <title>Wapi - Inicio</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-96 rounded-lg border-4 border-dashed border-gray-200" >
        Inicio
      </div>
      <Modal isOpen={isCreateVenueModalOpen} title={'Crear sucursal'}>
        <Form form={form} onSubmitForm={onSubmitForm}>
          <div className="overflow-hidden shadow sm:rounded-md">
            <div className="bg-white px-4 py-5 sm:p-6">
              <div className="grid grid-cols-6 gap-6">
                <GoogleAutoComplete />
              </div>
            </div>
            <div className="bg-gray-50 px-4 py-3 text-right sm:px-6">
              <button
                type="submit"
                className="inline-flex justify-center rounded-md border border-transparent bg-blue-100 px-4 py-2 text-sm font-medium text-wapi-blue hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
              >
                Crear sucursal
              </button>
            </div>
          </div>
        </Form>
      </Modal>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx: GetServerSidePropsContext) => {
  const session = await getServerAuthSession(ctx);

  if (!session) {
    return {
      redirect: { destination: "/api/auth/signin", permanent: false },
    }
  }

  return {
    props: session
  }
}

export default Index;