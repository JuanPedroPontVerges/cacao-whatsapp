import dayjs from "dayjs";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import Dashboard from "../components/layouts/Dashboard";
import Modal from "../components/Modal";
import OrderCard, { Action } from "../components/OrderCard";
import OrderDetail from "../components/OrderDetail";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from "../utils/trpc";
import { NextPageWithLayout } from "./_app";

const Orders: NextPageWithLayout = () => {
    const { data } = useSession();
    const userQuery = trpc.useQuery(["userRouter.getVenues", { id: data?.user?.id }]);
    const venueId = userQuery.data?.venueId;
    const orderQuery = trpc.useQuery(["orderRouter.findByVenueId", { id: venueId }])
    const orderStateMutation = trpc.useMutation(["orderRouter.updateState"])
    const [selectedOrderId, setSelectedOrderId] = useState<string>();
    const [isModalOpen, setIsModalOpen] = useState(false);

    const selectedOrder = orderQuery.data?.find((order) => order.id === selectedOrderId)

    const toggleModalVisiblity = () => {
        setIsModalOpen(!isModalOpen);
    }

    const onClickOrder = (id?: string) => {
        setSelectedOrderId(id);
        toggleModalVisiblity();
    }

    const handleOnClickAction = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, action: Action, id?: string) => {
        e.stopPropagation();
        const parsedState = action === 'confirm' ? 'En Preparaci√≥n' : action === 'cancel' ? 'Cancelado' : 'no se';
        if (id) {
            await orderStateMutation.mutateAsync({ orderId: id, action: parsedState });
            await orderQuery.refetch()
        }
    }

    return (
        <>
            <Head>
                <title>Wapi - Ordenes</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="h-96 rounded-lg border-4 border-dashed border-gray-200">
                <div className="flex justify-center mt-4 w-full">
                    <div className="flex gap-6 justify-around flex-shrink">
                        {
                            orderQuery.data?.map((order, index) => (
                                <OrderCard
                                    createdAt={dayjs(order.createdAt).toDate()}
                                    payment={order.payment}
                                    onClickAction={handleOnClickAction}
                                    onClick={onClickOrder}
                                    key={index}
                                    price={order.total}
                                    state={order.State}
                                    customer={order.customer}
                                    id={order.id}
                                />
                            ))
                        }
                    </div>
                </div>
                <Modal isOpen={isModalOpen} title='Detalle de orden' onClose={toggleModalVisiblity}>
                    <div className="mx-2 border border-black">
                        <div className="flex">
                            <OrderDetail
                                id={selectedOrder?.id}
                                state={selectedOrder?.payment}
                                customer={selectedOrder?.customer}
                                additionalInfo={selectedOrder?.additionalInfo}
                                finalAmount={selectedOrder?.total}
                                productStoreCarts={selectedOrder?.Cart.productStoreCarts} />
                        </div>
                    </div>
                </Modal>
            </div>
        </>
    );
};

Orders.getLayout = function getLayout(page) {
    return (
        <Dashboard>
            {page}
        </Dashboard>
    )
}

export const getServerSideProps: GetServerSideProps = async (ctx: GetServerSidePropsContext) => {
    const session = await getServerAuthSession(ctx);

    if (!session) {
        return {
            redirect: { destination: "/api/auth/signin", permanent: false },
        }
    }

    return {
        props: session
    }
}

export default Orders;