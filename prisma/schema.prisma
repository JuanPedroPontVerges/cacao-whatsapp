// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    venueId       String?
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    venue         Venue?    @relation(fields: [venueId], references: [id], onDelete: Cascade)
    menuId        String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Venue {
    id            String    @id @default(cuid())
    name          String
    googlePlaceId String?
    address       String?   @unique
    users         User[]
    menus         Menu[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
}

model Menu {
    id           String        @id @default(cuid())
    venueId      String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
    venue        Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)
    categories   Category[]
    optionGroups OptionGroup[]
}

model MenuSetting {
    id                String     @id @default(cuid())
    minPurchaseAmount Int?
    schedules         Schedule[]
}

model Schedule {
    id            String       @id @default(cuid())
    menuSettingId String
    fromMinute    Int?
    fromHour      Int?
    toMinute      Int?
    toHour        Int?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime?    @updatedAt
    menuSetting   MenuSetting? @relation(fields: [menuSettingId], references: [id], onDelete: Cascade)
}

model Category {
    id        String    @id @default(cuid())
    menuId    String
    name      String
    enabled   Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    menu      Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
    products  Product[]
}

model Product {
    id           String        @id @default(cuid())
    categoryId   String
    name         String
    description  String?
    imageUrl     String?
    price        Int?
    index        Int?
    enabled      Boolean       @default(true)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
    productStore ProductStore?
    category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ProductStore {
    id                         String                      @id @default(cuid())
    productId                  String                      @unique
    createdAt                  DateTime                    @default(now())
    updatedAt                  DateTime?                   @updatedAt
    product                    Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
    productStoreToOptionGroups ProductStoreToOptionGroup[]
    productStoreCarts          ProductStoreCart[]
}

model ProductStoreToOptionGroup {
    id             String          @id @default(cuid())
    productStoreId String
    optionGroupId  String
    displayTypeId  String
    multipleUnits  Boolean
    enabled        Boolean         @default(true)
    amount         Int?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime?       @updatedAt
    displayType    DisplayType     @relation(fields: [displayTypeId], references: [id], onDelete: Cascade)
    productStore   ProductStore    @relation(fields: [productStoreId], references: [id], onDelete: Cascade)
    optionGroup    OptionGroup     @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
    productOptions ProductOption[]
}

model ProductOption {
    id                          String                    @id @default(cuid())
    optionId                    String
    productStoreToOptionGroupId String
    enabled                     Boolean
    createdAt                   DateTime                  @default(now())
    updatedAt                   DateTime?                 @updatedAt
    option                      Option                    @relation(fields: [optionId], references: [id], onDelete: Cascade)
    productStoreToOptionGroup   ProductStoreToOptionGroup @relation(fields: [productStoreToOptionGroupId], references: [id], onDelete: Cascade)
}

model DisplayType {
    id                         String                      @id @default(cuid())
    name                       String
    productStoreToOptionGroups ProductStoreToOptionGroup[]
}

model OptionGroup {
    id                         String                      @id @default(cuid())
    menuId                     String
    name                       String
    enabled                    Boolean                     @default(true)
    createdAt                  DateTime                    @default(now())
    updatedAt                  DateTime?                   @updatedAt
    menu                       Menu                        @relation(fields: [menuId], references: [id], onDelete: Cascade)
    options                    Option[]
    productStoreToOptionGroups ProductStoreToOptionGroup[]
}

model Option {
    id             String          @id @default(cuid())
    optionGroupId  String
    name           String
    description    String?
    imageUrl       String?
    price          Int?
    maxAmount      Int?
    index          Int?
    enabled        Boolean         @default(true)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime?       @updatedAt
    optionGroup    OptionGroup     @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
    productOptions ProductOption[]
}

model ProductStoreCart {
    id             String       @id @default(cuid())
    productStoreId String
    cartId         String?
    additionalInfo String?
    amount         Int
    finalPrice     Int
    productStore   ProductStore @relation(fields: [productStoreId], references: [id], onDelete: Cascade)
    cart           Cart?        @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Cart {
    id                String             @id @default(cuid())
    finalPrice        Int
    productStoreCarts ProductStoreCart[]
}
